package com.iota.iri;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.jayway.restassured.RestAssured;
import com.jayway.restassured.config.HttpClientConfig;
import com.jayway.restassured.specification.RequestSpecification;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

import static org.hamcrest.Matchers.containsString;

public class APIIntegrationTests {

    // No result should ever take a minute
    private static final int SOCKET_TIMEOUT = 60_000;

    // Expect to connect to any service worldwide in under 100 ms
    // and to any online machine local in 1 ms. The 50 ms default value is a suggested compromise.
    private static final int CONNECTION_TIMEOUT = 50;

    static {
        RestAssured.port = 14265;
    }

    /**
     * Tests can choose to use this method instead of the no-args given() static method
     * if they want to manually specify custom timeouts.
     *
     * @param socket_timeout     The Remote host response time.
     * @param connection_timeout Remote host connection time & HttpConnectionManager connection return time.
     * @return The RequestSpecification to use for the test.
     */
    private static RequestSpecification given(int socket_timeout, int connection_timeout) {
        return RestAssured.given().config(RestAssured.config()
            .httpClient(HttpClientConfig.httpClientConfig()
                .setParam("http.conn-manager.timeout", (long) connection_timeout)
                .setParam("http.connection.timeout", connection_timeout)
                .setParam("http.socket.timeout", socket_timeout)));
    }

    private static RequestSpecification given() {
        return given(SOCKET_TIMEOUT, CONNECTION_TIMEOUT);
    }

    private static Gson gson() {
        return new GsonBuilder().create();
    }

    /**
     * curl http://localhost:14265 \
     * -X POST \
     * -H 'Content-Type: application/json' \
     * -d '{"command": "getNodeInfo"}'
     */
    @Test
    public void shouldTestGetNodeInfo() {

        final Map<String, Object> request = new HashMap<>();
        request.put("command", "getNodeInfo");

        given().
            contentType("application/json").header("X-IOTA-API-Version", 1).
            body(gson().toJson(request)).
            when().
            post("/").
            then().
            body(containsString("appName")).
            body(containsString("appVersion")).
            body(containsString("duration")).
            body(containsString("jreAvailableProcessors")).
            body(containsString("jreFreeMemory")).
            body(containsString("jreMaxMemory")).
            body(containsString("jreTotalMemory")).
            body(containsString("jreVersion")).
            body(containsString("latestMilestone")).
            body(containsString("latestMilestoneIndex")).
            body(containsString("jreAvailableProcessors")).
            body(containsString("latestSolidSubtangleMilestone")).
            body(containsString("latestSolidSubtangleMilestoneIndex")).
            body(containsString("neighbors")).
            body(containsString("packetsQueueSize")).
            body(containsString("time")).
            body(containsString("tips")).
            body(containsString("transactionsToRequest")).
            statusCode(200);
    }

    /**
     * curl http://localhost:14265 \
     * -X POST \
     * -H 'Content-Type: application/json' \
     * -d '{"command": "getNeighbors"}'
     */
    @Test
    public void shouldTestGetNeighbors() {

        final Map<String, Object> request = new HashMap<>();
        request.put("command", "getNeighbors");

        given().
            contentType("application/json").header("X-IOTA-API-Version", 1).
            body(gson().toJson(request)).
            when().
            post("/").
            then().
            body(containsString("neighbors")).
            body(containsString("address")).
            body(containsString("numberOfAllTransactions")).
            body(containsString("numberOfInvalidTransactions")).
            body(containsString("numberOfNewTransactions")).
            statusCode(200);
    }

    /**
     * curl http://localhost:14265 \
     * -X POST \
     * -H 'Content-Type: application/json' \
     * -d '{"command": "addNeighbors", "uris": ["udp://8.8.8.8:14265", "udp://8.8.8.5:14265"]}'
     */
    @Test
    public void shouldTestAddNeighbors() {

        final Map<String, Object> request = new HashMap<>();
        request.put("command", "addNeighbors");
        request.put("uris", new String[]{"udp://8.8.8.8:14265", "udp://8.8.8.5:14265"});
        given().
            contentType("application/json").header("X-IOTA-API-Version", 1).
            body(gson().toJson(request)).
            when().
            post("/").
            then().
            body(containsString("addedNeighbors")).
            body(containsString("duration")).
            statusCode(200);
    }

    /**
     * curl http://localhost:14265 \
     * -X POST \
     * -H 'Content-Type: application/json' \
     * -d '{"command": "removeNeighbors", "uris": ["udp://8.8.8.8:14265", "udp://8.8.8.5:14265"]}'
     */
    @Test
    public void shouldTestRemoveNeighbors() {

        final Map<String, Object> request = new HashMap<>();
        request.put("command", "removeNeighbors");
        request.put("uris", new String[]{"udp://8.8.8.8:14265", "udp://8.8.8.5:14265"});
        given().
            contentType("application/json").header("X-IOTA-API-Version", 1).
            body(gson().toJson(request)).
            when().
            post("/").
            then().
            body(containsString("removedNeighbors")).
            body(containsString("duration")).
            statusCode(200);
    }

    /**
     * curl http://localhost:14265 \
     * -X POST \
     * -H 'Content-Type: application/json' \
     * -d '{"command": "getTips"}'
     */
    @Test
    public void shouldTestGetTips() {

        final Map<String, Object> request = new HashMap<>();
        request.put("command", "getTips");

        given().
            contentType("application/json").header("X-IOTA-API-Version", 1).
            body(gson().toJson(request)).
            when().
            post("/").
            then().
            body(containsString("hashes")).
            body(containsString("duration")).
            statusCode(200);
    }

    /**
     * curl http://localhost:14265 \
     * -X POST \
     * -H 'Content-Type: application/json' \
     * -d '{"command": "findTransactions", "addresses": ["RVORZ9SIIP9RCYMREUIXXVPQIPHVCNPQ9HZWYKFWYWZRE9JQKG9REPKIASHUUECPSQO9JT9XNMVKWYGVAZETAIRPTM"]}'
     */
    @Test
    public void shouldTestFindTransactions() {

        final Map<String, Object> request = new HashMap<>();
        request.put("command", "findTransactions");
        request.put("addresses", new String[]{"RVORZ9SIIP9RCYMREUIXXVPQIPHVCNPQ9HZWYKFWYWZRE9JQKG9REPKIASHUUECPSQO9JT9XNMVKWYGVAZETAIRPTM"});
        given().
            contentType("application/json").header("X-IOTA-API-Version", 1).
            body(gson().toJson(request)).
            when().
            post("/").
            then().
            body(containsString("hashes")).
            body(containsString("duration")).
            statusCode(200);
    }

    /**
     * curl http://localhost:14265 \
     * -X POST \
     * -H 'Content-Type: application/json' \
     * -d '{"command": "getTrytes", "hashes": ["OAATQS9VQLSXCLDJVJJVYUGONXAXOFMJOZNSYWRZSWECMXAQQURHQBJNLD9IOFEPGZEPEMPXCIVRX9999"]}'
     */
    @Test
    public void shouldTestGetTrytes() {

        final Map<String, Object> request = new HashMap<>();
        request.put("command", "getTrytes");
        request.put("hashes", new String[]{"OAATQS9VQLSXCLDJVJJVYUGONXAXOFMJOZNSYWRZSWECMXAQQURHQBJNLD9IOFEPGZEPEMPXCIVRX9999"});
        given().
            contentType("application/json").header("X-IOTA-API-Version", 1).
            body(gson().toJson(request)).
            when().
            post("/").
            then().
            //body(containsString("trytes")).
                body(containsString("duration")).
            statusCode(200);
    }

    /**
     * curl http://localhost:14265 \
     * -X POST \
     * -H 'Content-Type: application/json' \
     * -d '{"command": "getInclusionStates", "transactions": ["QHBYXQWRAHQJZEIARWSQGZJTAIITOZRMBFICIPAVD9YRJMXFXBDPFDTRAHHHP9YPDUVTNOFWZGFGWMYHEKNAGNJHMW"], "tips": ["ZIJGAJ9AADLRPWNCYNNHUHRRAC9QOUDATEDQUMTNOTABUVRPTSTFQDGZKFYUUIE9ZEBIVCCXXXLKX9999"]}'
     */
    @Test
    public void shouldTestGetInclusionStates() {

        final Map<String, Object> request = new HashMap<>();
        request.put("command", "getInclusionStates");
        request.put("transactions", new String[]{"999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"});
        request.put("tips", new String[]{"999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"});
        given().
            contentType("application/json").header("X-IOTA-API-Version", 1).
            body(gson().toJson(request)).
            when().
            post("/").
            then().
            //body(containsString("states")).
                body(containsString("duration")).
            statusCode(200);
    }

    /**
     * curl http://localhost:14265 \
     * -X POST \
     * -H 'Content-Type: application/json' \
     * -d '{"command": "getBalances", "addresses": ["HBBYKAKTILIPVUKFOTSLHGENPTXYBNKXZFQFR9VQFWNBMTQNRVOUKPVPRNBSZVVILMAFBKOTBLGLWLOHQ"], "threshold": 100}'
     */
    @Test
    public void shouldTestGetBalances() {

        final Map<String, Object> request = new HashMap<>();
        request.put("command", "getBalances");
        request.put("addresses", new String[]{"HBBYKAKTILIPVUKFOTSLHGENPTXYBNKXZFQFR9VQFWNBMTQNRVOUKPVPRNBSZVVILMAFBKOTBLGLWLOHQ"});
        request.put("threshold", 100);

        given().
            contentType("application/json").header("X-IOTA-API-Version", 1).
            body(gson().toJson(request)).
            when().
            post("/").
            then().
            body(containsString("milestone")).
            body(containsString("milestoneIndex")).
            statusCode(200);
    }

    /**
     * curl http://localhost:14265 \
     * -X POST \
     * -H 'Content-Type: application/json' \
     * -d '{"command": "getTransactionsToApprove", "depth": 27}'
     */
    @Test
    public void shouldTestGetTransactionsToApprove() {

        final Map<String, Object> request = new HashMap<>();
        request.put("command", "getTransactionsToApprove");
        request.put("depth", 27);

        given().
            contentType("application/json").header("X-IOTA-API-Version", 1).
            body(gson().toJson(request)).
            when().
            post("/").
            then().
            body(containsString("trunkTransaction")).
            body(containsString("branchTransaction")).
            body(containsString("duration")).
            statusCode(200);
    }

    /**
     * curl http://localhost:14265 \
     * -X POST \
     * -H 'Content-Type: application/json' \
     * -d '{"command": "broadcastTransactions", "trytes}'
     */
    @Test
    public void shouldTestBroadcastTransactions() {

        final Map<String, Object> request = new HashMap<>();
        request.put("command", "broadcastTransactions");
        request.put("trytes", new String[]{});

        given().
            contentType("application/json").header("X-IOTA-API-Version", 1).
            body(gson().toJson(request)).
            when().
            post("/").
            then()
            .log().all().and().
            statusCode(200);
    }

    /**
     * curl http://localhost:14265 \
     * -X POST \
     * -H 'Content-Type: application/json' \
     * -d '{"command": "storeTransactions", "trytes}'
     */
    @Test
    public void shouldTestStoreTransactions() {

        final Map<String, Object> request = new HashMap<>();
        request.put("command", "storeTransactions");
        request.put("trytes", new String[]{});

        given().
            contentType("application/json").header("X-IOTA-API-Version", 1).
            body(gson().toJson(request)).
            when().
            post("/").
            then().log().all().and().
            statusCode(200);
    }
}