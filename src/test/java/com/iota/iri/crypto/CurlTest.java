package com.iota.iri.crypto;

import java.util.Random;

import org.junit.Assert;
import org.junit.Test;

import com.iota.iri.utils.Converter;
import com.iota.iri.utils.Pair;

/**
 * Created by paul on 4/15/17.
 */
public class CurlTest {
    final static Random seed = new Random();
    final String trytes
    final String hash = "TIXEPIEYMGURTQ9ABVYVQSWMNGCVQFASMFAEQWUZCLIWLCDIGYVXOEJBBEMZOIHAYSUQMEFOGZBXUMHQW";

    @Test
    public void normalHashWorks() {
        int size = 8019;
        byte[] inTrits = new byte[size];
        Converter.trits(trytes, inTrits, 0);
        byte[] hashTrits = new byte[Curl.HASH_LENGTH];
        Sponge curl;
        curl = new Curl(SpongeFactory.Mode.CURLP81);
        curl.absorb(inTrits, 0, inTrits.length);
        curl.squeeze(hashTrits, 0, Curl.HASH_LENGTH);
        String outTrytes = Converter.trytes(hashTrits);
        Assert.assertEquals(hash, outTrytes);
    }

    @Test
    public void pairHashWorks() {
        int size = 8019;
        byte[] inTrits = new byte[size];
        Converter.trits(trytes, inTrits, 0);
        Pair<long[], long[]> hashPair = new Pair<>(new long[Curl.HASH_LENGTH], new long[Curl.HASH_LENGTH]);
        Curl curl;
        curl = new Curl(true, SpongeFactory.Mode.CURLP81);
        curl.absorb(Converter.longPair(inTrits), 0, inTrits.length);
        curl.squeeze(hashPair, 0, Curl.HASH_LENGTH);
        byte[] hashTrits = Converter.trits(hashPair.low, hashPair.hi);
        String outTrytes = Converter.trytes(hashTrits);
        Assert.assertEquals(hash, outTrytes);
    }

    @Test
    public void pairHashIsFasterThanNormalHash() {
        int size = 8019;
        long start1, diff1, start2, diff2;
        byte[] inTrits = new byte[size];
        Converter.trits(trytes, inTrits, 0);
        final byte[] hashTrits = new byte[Curl.HASH_LENGTH];
        Curl curl, curl1;
        curl = new Curl(true, SpongeFactory.Mode.CURLP81);
        curl1 = new Curl(SpongeFactory.Mode.CURLP81);
        Pair<long[], long[]> inPair = Converter.longPair(inTrits);
        Pair<long[], long[]> hashPair = new Pair<>(new long[Curl.HASH_LENGTH], new long[Curl.HASH_LENGTH]);
        int iteration = 0;
        while(iteration++ < 10) {
            curl.absorb(inPair, 0, inTrits.length);
            curl.squeeze(hashPair, 0, Curl.HASH_LENGTH);
            curl.reset(true);
            curl1.absorb(inTrits, 0, inTrits.length);
            curl1.squeeze(hashTrits, 0, Curl.HASH_LENGTH);
            curl1.reset();
        }
        int serialCount = 64;
        start1 = System.nanoTime();
        while(serialCount-- > 0) {
            curl1.absorb(inTrits, 0, inTrits.length);
            curl1.squeeze(hashTrits, 0, Curl.HASH_LENGTH);
            curl1.reset();
        }
        diff1 = System.nanoTime() - start1;
        hashPair = new Pair<>(new long[Curl.HASH_LENGTH], new long[Curl.HASH_LENGTH]);
        start2 = System.nanoTime();
        curl.absorb(inPair, 0, inTrits.length);
        curl.squeeze(hashPair, 0, Curl.HASH_LENGTH);
        diff2 = System.nanoTime() - start2;
        System.arraycopy(Converter.trits(hashPair.low, hashPair.hi), 0, hashTrits, 0, Curl.HASH_LENGTH);
        String outTrytes = Converter.trytes(hashTrits);
        Assert.assertEquals(hash, outTrytes);
        System.out.println(diff1);
        System.out.println(diff2);
        System.out.println(diff1/diff2);
        Assert.assertTrue(diff2 < diff1);
    }

}
